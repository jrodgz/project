/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

  eval("\"use strict\";\n\nfunction createTopTenArchivingYears(where, data) {\n\n   var visualization = d3plus.viz().container(where).data(data).type(\"bar\").id(\"Year of Archive\").x(\"Year of Archive\").y(\"Number Of Mementos\").resize(true).draw();\n}\n\nfunction createTopTenKeywords(where, data) {\n\n   var visualization = d3plus.viz().container(where).data(data).type(\"bubbles\").id([\"group\", \"name\"]).depth(1).size(\"size\").color(\"group\").resize(true).draw();\n}\n\n/*\n create chart top ten popular domains\n */\nfunction createTopTenPopularDomains(where, data) {\n\n   var chart = c3.generate({\n      bindto: where,\n      data: {\n         x: 'x',\n         columns: [data.x, data.cols],\n         type: 'bar'\n      },\n      bar: {\n         width: {\n            ratio: 0.5\n         }\n      },\n      axis: {\n         rotated: true,\n         x: {\n            type: 'category',\n            show: true\n         }\n      }\n   });\n}\n\nfunction createZoomableContainer(where, data) {\n   var width = $(where).width();\n   var height = $(where).height();\n   var svg = d3.select(where).append('svg').attr('width', width).attr('height', height);\n\n   preprocess.onLoad(data);\n\n   var group = drawing.createZoomableContainer(svg, width, height);\n   drawing.drawGridLines(group, width, height, 100);\n   var view = new drawing.predefined.DynamicTextNodeView(group, width, height, svg, d3.select(where));\n   view.drawControls($(where));\n}\n\nfunction createHistogramOfTags(where, data) {\n   c3.generate({\n      bindto: where,\n      data: {\n         x: 'x',\n         columns: [data.x, data.cols],\n         type: 'bar'\n      },\n      bar: {\n         width: {\n            ratio: 0.5\n         }\n      },\n      axis: {\n         x: {\n            type: 'category',\n            show: true\n         }\n      }\n   });\n}\n\nfunction yearMonthTagDomainTree(where, data) {\n   var visualization = d3plus.viz().container(where).data(data).type(\"tree_map\").id([\"year\", \"month\", \"tag\", \"domain\"]).size(\"num\").time({ \"value\": \"year\", \"solo\": data[0].year }).tooltip({\n      fullscrean: true,\n      size: false,\n      large: 450,\n      small: 450,\n      value: [\"year\", \"month\", \"tag\", \"domain\", \"dates\"]\n   }).resize(true).draw();\n}\n\nfunction tagDomainYearMonthDatGraph(where, data) {\n   var visualization = d3plus.viz().container(where).type(\"network\").data(data.nodes).nodes({ overlap: 0.5 }).edges(data.edges).size(\"size\").id(\"id\").tooltip([\"connectionsOut\", \"connectionsIn\"]).descs({\n      \"connectionsOut\": \"How many Tags/Domains/Dates this node points to\",\n      \"connectionsIn\": \"How many Tags/Domains/Dates point to this node\"\n   }).resize(true).draw();\n}\n\nfunction domainTagYearMonthTree(where, data) {\n   var visualization = d3plus.viz().container(where).data(data).type(\"tree_map\").id([\"domain\", \"tag\", \"year\", \"month\"]).size(\"num\").time({ \"value\": \"year\", \"solo\": data[0].year }).tooltip({\n      fullscrean: true,\n      size: false,\n      large: 450,\n      small: 450,\n      value: [\"domain\", \"tag\", \"year\", \"month\", \"dates\"]\n   }).resize(true).draw();\n}\n\nfunction yearTagDomainYearMonthTree(where, data) {\n   var visualization = d3plus.viz().container(where).data(data).type(\"tree_map\").id([\"tag\", \"domain\", \"year\", \"month\"]).size(\"num\").time({ \"value\": \"year\", \"solo\": data[0].year }).tooltip({\n      fullscrean: true,\n      size: false,\n      large: 450,\n      small: 450,\n      value: [\"tag\", \"domain\", \"year\", \"month\", \"dates\"]\n   }).resize(true).draw();\n}\n\nfunction createTimeLine(where, tldata) {\n   var tl = new TimelineChart(where, tldata, {\n      tip: function tip(d) {\n         return d.urim + '<br>' + d.at || d.from + '<br>' + d.to;\n      },\n      ttip: function ttip(d) {\n         var dit = S(d.label);\n         if (dit.contains(',')) {\n            return \"Tags: \" + dit.replaceAll(',', ',<br>').s;\n         } else {\n            return \"Tags: \" + d.s;\n         }\n      }\n   });\n}\n\nfunction createTimeLineOL(where, tldata) {\n   var tl = new TimelineChart(where, tldata, {\n      tip: function tip(d) {\n         return d.urim + '<br>' + d.at || d.tip + '<br>' + d.from + '<br>' + d.to;\n      },\n      ttip: function ttip(d) {\n         var dit = S(d.label);\n         if (dit.contains(',')) {\n            return \"Tags: \" + dit.replaceAll(',', ',<br>').s;\n         } else {\n            return \"Tags: \" + d.s;\n         }\n      }\n   });\n}\n\nfunction numMtoOlap(where, data) {\n   var visualization = d3plus.viz().container(where) // container DIV to hold the visualization\n   .data(data) // data to use with the visualization\n   .type(\"scatter\") // visualization type\n   .id(\"tag\") // key for which our data is unique on\n   .x(\"nol\") // key for x-axis\n   .y(\"nm\") // key for y-axis\n   .draw();\n}\n\nfunction timeGraph(data) {\n   var len = data.tagedMs.length;\n   for (var i = 0; i < len; ++i) {\n      d3plus.viz().container(\"#cchart\" + (i + 1)).type(\"rings\").data(data.tagedMs[i].nodes).id('name').edges({\n         \"size\": \"strength\",\n         \"value\": data.tagedMs[i].edges\n      }).resize(true).focus(data.tags[i]).draw();\n   }\n}\n\n// var tableData = [];\n// tableData.push({\n//    index: data[i].tagString,\n//    \"Number Of Mementos\": data[i].numberOfMementos,\n//    \"Spans\": data[i].spansHuman,\n//    \"Time Span\": data[i].spans,\n//    \"Number of URI-Rs\": data[i].urirs.length,\n//    \"Has Overlap\": data[i].hasOverlap ? \"Yes\":\"No\",\n//\n// });\n//\n// d3plus.viz()\n//    .container(\"#cchartt\"+(i+1))\n//    .type(\"table\")\n//    .data(tableData)\n//    .id(\"index\")\n//    .shape(\"square\")\n//    .cols([\"Number Of Mementos\", \"Spans\", \"Time Span\",\"Number of URI-Rs\",\"Has Overlap\"])\n//    .resize(true)\n//    .draw();\n// if(data[i].hasOverlap){\n//    var odata = [\n//\n//    ];\n//    data[i].overlapData.forEach(function (old) {\n//       odata.push({\n//          index: old.urir,\n//          \"Overlaps By\": old.fullOut,\n//          \"Date 1\": new Date(old.fd).toString(),\n//          \"Date 2\": new Date(old.lf).toString()\n//       });\n//    });\n//\n//    d3plus.viz()\n//       .container(\"#occhartt\"+(i+1))\n//       .type(\"table\")\n//       .data(odata)\n//       .id(\"index\")\n//       .shape(\"square\")\n//       .cols([\"Overlaps By\", \"Date 1\", \"Date 2\"])\n//       .resize(true)\n//       .draw();\nfunction olapGraph(data) {\n   var len = data.tagedMs.length;\n   for (var i = 0; i < len; ++i) {\n      d3plus.viz().container(\"#cchartt\" + (i + 1)).type(\"rings\").data(data.tagedMs[i].nodes).id('name').edges({\n         \"size\": \"strength\",\n         \"value\": data.tagedMs[i].edges\n      }).resize(true).focus(data.tagedMs[i].focus).draw();\n   }\n}\n\n// d.domainTYMTree ;\n// d.tagDomainYearMonthTree ;\n// d.tagDomainYearMonthDatGraph ;\n\n$.getJSON(\"/data\", function (d) {\n\n   console.log(d);\n   d.timeline.forEach(function (i) {\n      i.data.forEach(function (ii) {\n         ii.at = new Date(ii.at);\n         ii.type = TimelineChart.TYPE.POINT;\n      });\n   });\n\n   olapGraph(d.tagOlapGraph);\n   createTimeLine('#chart1', d.timeline);\n   createTopTenArchivingYears('#topTenArchivingYears', d.topTenArchingYears);\n\n   createTopTenKeywords('#topTenPopularKeywords', d.topTenKeyWords);\n\n   createTopTenPopularDomains('#topTenPopularDomains', d.topTenDomains);\n\n   createHistogramOfTags('#chart3', d.tagHistogram);\n\n   createZoomableContainer('#chart2', d.parsedData);\n   yearMonthTagDomainTree('#chart4', d.yMTDTree);\n   domainTagYearMonthTree('#chart5', d.domainTYMTree);\n   yearTagDomainYearMonthTree('#chart6', d.tagDomainYearMonthTree);\n\n   timeGraph(d.graphData);\n\n   // numMtoOlap(\"#numMtoNumOlap\",numMToOverlap );\n   // #numMtoTimeSpanned\n   //  #numMtoNumOlap\n\n   listenForClicks();\n   listenForClicks2(d.graphData.tagedMs.length);\n   listenForClicks3();\n});//# sourceMappingURL=data:application/json;base64,");

/***/ }
/******/ ]);