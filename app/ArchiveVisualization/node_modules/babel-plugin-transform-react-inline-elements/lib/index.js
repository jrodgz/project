"use strict";

exports.__esModule = true;

exports["default"] = function (_ref) {
  var t = _ref.types;

  function hasRefOrSpread(attrs) {
    for (var i = 0; i < attrs.length; i++) {
      var attr = attrs[i];
      if (t.isJSXSpreadAttribute(attr)) return true;
      if (isJSXAttributeOfName(attr, "ref")) return true;
    }
    return false;
  }

  function isJSXAttributeOfName(attr, name) {
    return t.isJSXAttribute(attr) && t.isJSXIdentifier(attr.name, { name: name });
  }

  function getAttributeValue(attr) {
    var value = attr.value;
    if (!value) return t.identifier("true");
    if (t.isJSXExpressionContainer(value)) value = value.expression;
    return value;
  }

  return {
    visitor: {
      JSXElement: function JSXElement(path, file) {
        var node = path.node;

        // filter
        var open = node.openingElement;
        if (hasRefOrSpread(open.attributes)) return;

        // init
        var props = t.objectExpression([]);
        var key = null;
        var type = open.name;

        if (t.isJSXIdentifier(type) && t.react.isCompatTag(type.name)) {
          type = t.stringLiteral(type.name);
        }

        function pushProp(objProps, key, value) {
          objProps.push(t.objectProperty(key, value));
        }

        // props
        var _arr = open.attributes;
        for (var _i = 0; _i < _arr.length; _i++) {
          var attr = _arr[_i];
          if (isJSXAttributeOfName(attr, "key")) {
            key = getAttributeValue(attr);
          } else {
            var _name = attr.name.name;
            var propertyKey = t.isValidIdentifier(_name) ? t.identifier(_name) : t.stringLiteral(_name);
            pushProp(props.properties, propertyKey, getAttributeValue(attr));
          }
        }

        var args = [type, props];
        if (key || node.children.length) {
          var children = t.react.buildChildren(node);
          args.push.apply(args, [key || t.unaryExpression("void", t.numericLiteral(0), true)].concat(children));
        }

        var el = t.callExpression(file.addHelper("jsx"), args);
        path.replaceWith(el);
      }
    }
  };
};

module.exports = exports["default"];